use Storable;
use diagnostics;
#%myhash = %{ retrieve('/2_disk/longyk/workspace/library.hash') };
%myhash = %{ retrieve('/2_disk/longyk/workspace/overlap2.hash') };
#$hash_ref = retrieve('/2_disk/longyk/workspace/overlap2.hash');
#%myhash=\$hash_ref;
$query  = 'AAAATGTATATATACTTTGTCTTCGGAGCTGATACTACTAGAAAGCAGAA';
$k      = 0;
while ( $k + 10 < length $query ) {
    $q[$k] = uc substr( $query, $k, 11 );
    @myfield = split /;/, $myhash{ $q[$k] };
    foreach $field (@myfield) {
	@place = split /\s+/, $field;
	$ERR{ $place[0] }{ $place[1] - $k }++;
    }
    $k++;
}
foreach $key1 ( keys %ERR ) {
    open FILE1, '/2_disk/longyk/workspace/' . $key1 . '.fa'
	or die "Could not open file 'FILE1' $!";
    $seq = <FILE1>;
    foreach $key2 ( keys %{ $ERR{$key1} } ) {
	if ( $ERR{$key1}{$key2} > 5 ) {
	    $string = substr( $seq, $key2, ( length $query ) );
	    &Alignment( $query, $string, $key1, $key2 );
	}
    }
    close FILE1;
}

@winners = sort by_score keys %hash;
$iii     = 0;
while ( $iii < 10 ) {
    print $winners[$iii];
    $iii++;
}
#################  sort
sub by_score { $hash{$b} <=> $hash{$a} }

########################################################
##Alignment
sub Alignment {
    $length1  = length $_[0];
    $length2  = length $_[1];
    $i        = 0;
    $j        = 0;
    $gap      = 4;
    $match    = 3;
    $mismatch = -1;

    #initial the first column and first row.
    while ( $i < $length1 ) {
	$A[$i][0] = -$i * $gap;
	$A[0][$j] = -$j * $gap;
	$j        = $j + 1;
	$i        = $i + 1;
    }

    #calculate the rest value of the matrix.
    $i = 1;
    while ( $i < $length1 ) {
	$j = 1;
	while ( $j < $length2 ) {

	    #determine the value of S(i,j).
	    $Si = substr( $_[0], $i, 1 );
	    $Sj = substr( $_[1], $j, 1 );
	    $Si eq $Sj ? $Sij = $match : $Sij = $mismatch;
	    $horizontalGap = $A[ $i - 1 ][$j] - $gap;
	    $verticalGap   = $A[$i][ $j - 1 ] - $gap;
	    $noGap         = $A[ $i - 1 ][ $j - 1 ] + $Sij;
	    $A[$i][$j] = Maximun( $horizontalGap, $verticalGap, $noGap );
	    $j++;
	}
	$i++;
    }

##backtracking.
    $i       = $length1 - 1;
    $j       = $length2 - 1;
    $newseq1 = substr( $_[0], $i, 1 );
    $newseq2 = substr( $_[1], $j, 1 );

    while ( $i > 0 && $j > 0 ) {

	$maximun =
	    Maximun( $A[ $i - 1 ][ $j - 1 ], $A[ $i - 1 ][$j], $A[$i][ $j - 1 ] );
	if ( $A[ $i - 1 ][ $j - 1 ] == $maximun ) {
	    $newseq1 = substr( $_[0], $i - 1, 1 ) . $newseq1;
	    $newseq2 = substr( $_[1], $j - 1, 1 ) . $newseq2;
	    $i       = $i - 1;
	    $j       = $j - 1;
	}
	elsif ( $A[ $i - 1 ][$j] == $maximun ) {
	    $newseq2 = '_' . $newseq2;
	    $newseq1 = substr( $_[0], $i - 1, 1 ) . $newseq1;
	    $i       = $i - 1;
	}
	elsif ( $A[$i][ $j - 1 ] == $maximun ) {
	    $newseq2 = substr( $_[1], $j - 1, 1 ) . $newseq2;
	    $newseq1 = '_' . $newseq1;
	    $j       = $j - 1;
	}
    }
########## determine identities.
    $i       = 0;
    $MatchNo = 0;
    $idenaa  = "";
    while ( $i < length $newseq1 ) {
	if ( substr( $newseq1, $i, 1 ) eq substr( $newseq2, $i, 1 ) ) {
	    $MatchNo += 1;
	    $idenaa .= "|";
	}
	else {
	    $idenaa .= " ";
	}
	$i += 1;
    }
    $identities = $MatchNo / ( length $newseq1 ) * 100;
    if ( $identities > 30 ) {
	$result =
	        "$_[2]\t$_[3]\n"
		  . "\$identities = $identities\n"
		    . "$newseq1\n"
		      . "$idenaa\n"
		      . "$newseq2\n";
	$hash{$result} = $identities;
    }
}

sub Maximun {
    $max = $_[0];
    foreach $item (@_) {
	if ( $max < $item ) {
	    $max = $item;
	}
    }
    return $max;
}
