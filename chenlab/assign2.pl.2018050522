#!/usr/bin/perl -w

#PBS -q batch
#PBS -N Assigned
#PBS -l nodes=1:ppn=16
#PBS -o /home/lyk/Gra_Pro/STAR/$sample
#PBS -j oe 
#PBS -l walltime=50:30:00
#PBS -l cput=48:00:00  
#PBS -l host=compute-0-5
#PBS -l mem=50G
#
use 5.010;

my $sample = $ARGV[0];

my $start = time();
open FILE, ">/data1/lyk/chenlab/$sample\_assign_info.txt";
print FILE "Sample\tSpecies\tchrA\tchrM\tchrX\tchrA\tchrM\tchrX\n";
print FILE "\t\tUnique\tUnique\tUnique\tMulti\tMulti\tMulti\n";
my $mouse = "samtools view -f 67 /data1/lisun/fusion_cell/STAR/mm10_$sample/Aligned.sortedByCoord.out.bam | awk '{print \$1,\$3,\$5,\$14}' |";
my $rat   = "samtools view -f 67 /data1/lisun/fusion_cell/STAR/rn6_$sample/Aligned.sortedByCoord.out.bam  | awk '{print \$1,\$3,\$5,\$14}' |";
my $asg_m = ">/home/lyk/data1/chenlab/STAR/assign/mm10_$sample";
my $asg_r = ">/home/lyk/data1/chenlab/STAR/assign/rn6_$sample";
my $unasg = ">/home/lyk/data1/chenlab/STAR/assign/comn_$sample";
my @data = &assign($mouse,$rat,$asg_m,$asg_r,$unasg);

print FILE "$sample\tmm10\t$data[0]\t$data[1]\t$data[2]\t$data[3]\t$data[4]\t$data[5]\n";
print FILE "$sample\trn6\t$data[6]\t$data[7]\t$data[8]\t$data[9]\t$data[10]\t$data[11]\n";
print FILE "$sample\tcomn\t$data[12]\t$data[13]\t$data[14]\t$data[15]\t$data[16]\t$data[17]\n";

my $end = time();
my $time = $end -$start;
print "time: $time s\n";

sub assign{
	open MOU, $_[0];
	open RAT, $_[1];
	open ASM, $_[2];
	open ASR, $_[3];
	open UN,  $_[4];
	my @mchr = (0,0,0,0,0,0);
	my @rchr = (0,0,0,0,0,0);
	my @cchr = (0,0,0,0,0,0);

	my (%mm10,%rn6);
	while (<MOU>){
		chomp;
		my ($QNAME,$CHR,$MAPQ,$AS) = split;
		if(!exists $mm10{$QNAME}){
			my (undef,undef,$aScore)   = split /:/,$AS;
			$mm10{$QNAME} = "$aScore\t$CHR\t$MAPQ";
		}
	}
	close MOU;


	while(<RAT>){
		chomp;
		my ($QNAME,$CHR,$MAPQ,$AS) = split;
		if(!exists $rn6{$QNAME}){
			my (undef,undef,$aScore)   = split /:/,$AS;
			$rn6{$QNAME} = "$aScore\t$CHR\t$MAPQ";
		}
	}
	close RAT;

	while(my ($key,$value) = each %mm10){
		if(exists $rn6{$key}){
			my ($as1,$chr1,$mapq1) = split /\t/,$value;
			my ($as2,$chr2,$mapq2) = split /\t/,$rn6{$key};
			if($as1<$as2){
				say ASR $key;
				if($chr2 =~ /chr[0-9]+/){
					if($mapq2 eq 255){
						$rchr[0]++;
					}
					else{
						$rchr[3]++;
					}
				}
				elsif($chr2 eq "chrM") {
					if($mapq2 eq 255){
						$rchr[1]++;
					}
					else{
						$rchr[4]++;
					}
				}
				elsif($chr2 eq "chrX"){
					if($mapq2 eq 255){
						$rchr[2]++;
					}
					else{
						$rchr[5]++;
					}
				}
			}
			elsif($as1>$as2){
				say ASM $key;
				if($chr1 =~ /chr[0-9]+/){
					if($mapq1 eq 255){
						$mchr[0]++;
					}
					else{
						$mchr[3]++;
					}
				}
				elsif($chr1 eq "chrM") {
					if($mapq1 eq 255){
						$mchr[1]++;
					}
					else{
						$mchr[4]++;
					}
				}
				elsif($chr1 eq "chrX"){
					if($mapq1 eq 255){
						$mchr[2]++;
					}
					else{
						$mchr[5]++;
					}
				}
			}
			else{
				say UN $key;
				if($chr1 =~ /chr[0-9]+/){
					if($mapq1 eq 255){
						$cchr[0]++;
					}
					else{
						$cchr[3]++;
					}
				}
				elsif($chr1 eq "chrM") {
					if($mapq1 eq 255){
						$cchr[1]++;
					}
					else{
						$cchr[4]++;
					}
				}
				elsif($chr1 eq "chrX"){
					if($mapq1 eq 255){
						$cchr[2]++;
					}
					else{
						$cchr[5]++;
					}
				}
			}
		}
		else{
			say ASM $key;
			($as1,$chr1,$mapq1) = split /\t/,$value;
			if($chr1 =~ /chr[0-9]+/){
				if($mapq1 eq 255){
					$mchr[0]++;
				}
				else{
					$mchr[3]++;
				}
			}
			elsif($chr1 eq "chrM") {
				if($mapq1 eq 255){
					$mchr[1]++;
				}
				else{
					$mchr[4]++;
				}
			}
			elsif($chr1 eq "chrX"){
				if($mapq1 eq 255){
					$mchr[2]++;
				}
				else{
					$mchr[5]++;
				}
			}
		}
	}

	while(my ($key,$value) = each %rn6){
		if(!exists $mm10{$key}){
			say ASR $key;
			($as2,$chr2,$mapq2) = split /\t/,$value;
			if($chr2 =~ /chr[0-9]+/){
				if($mapq2 eq 255){
					$rchr[0]++;
				}
				else{
					$rchr[3]++;
				}
			}
			elsif($chr2 eq "chrM") {
				if($mapq2 eq 255){
					$rchr[1]++;
				}
				else{
					$rchr[4]++;
				}
			}
			elsif($chr2 eq "chrX"){
				if($mapq2 eq 255){
					$rchr[2]++;
				}
				else{
					$rchr[5]++;
				}
			}
		}
	}
	return (@mchr,@rchr,@cchr);
}

